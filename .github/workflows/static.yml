<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÂΩ©Ëâ≤Âõ¥Ê£ã - ÂêÉÂ≠êÁ´ûËµõ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Microsoft YaHei', sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            min-height: 100vh;
            padding: 20px;
            color: white;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 20px 0;
            margin-bottom: 20px;
        }
        
        h1 {
            font-size: 2.8rem;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            margin-bottom: 10px;
            background: linear-gradient(to right, #ff0000, #ff7700, #ffff00, #00ff00, #00ffff, #0000ff, #8a2be2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .game-info {
            display: flex;
            justify-content: space-between;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .players-info {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .player {
            display: flex;
            align-items: center;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: bold;
            background: rgba(255, 255, 255, 0.1);
        }
        
        .player.active {
            box-shadow: 0 0 15px currentColor;
            transform: scale(1.05);
        }
        
        .player-color {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 10px;
            border: 2px solid white;
        }
        
        .game-stats {
            display: flex;
            gap: 20px;
        }
        
        .stat {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px 20px;
            border-radius: 10px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #ffcc00;
        }
        
        .game-area {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .board-container {
            flex: 1;
            min-width: 500px;
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }
        
        .board {
            position: relative;
            background: #e0bb7a;
            border: 2px solid #5d4037;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);
        }
        
        .grid-line {
            position: absolute;
            background: #000;
        }
        
        .horizontal-line {
            width: 100%;
            height: 1px;
        }
        
        .vertical-line {
            width: 1px;
            height: 100%;
        }
        
        .star-point {
            position: absolute;
            width: 8px;
            height: 8px;
            background: #000;
            border-radius: 50%;
        }
        
        .intersection {
            position: absolute;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: transparent;
            cursor: pointer;
            z-index: 5;
        }
        
        .stone {
            position: absolute;
            border-radius: 50%;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.5);
            cursor: pointer;
            transition: transform 0.2s;
            z-index: 10;
        }
        
        .stone:hover {
            transform: scale(1.1);
        }
        
        .stone.captured {
            animation: capture 0.5s forwards;
        }
        
        @keyframes capture {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.5); opacity: 0.7; }
            100% { transform: scale(0); opacity: 0; }
        }
        
        .controls {
            width: 300px;
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }
        
        .control-section {
            margin-bottom: 25px;
        }
        
        h2 {
            font-size: 1.5rem;
            margin-bottom: 15px;
            color: #ffcc00;
            border-bottom: 2px solid #ffcc00;
            padding-bottom: 5px;
        }
        
        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .btn {
            padding: 12px;
            border: none;
            border-radius: 5px;
            background: #5d9cec;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .btn:hover {
            background: #3a7bd5;
            transform: translateY(-2px);
        }
        
        .btn.pass {
            background: #ff9800;
        }
        
        .btn.pass:hover {
            background: #f57c00;
        }
        
        .btn.reset {
            background: #f44336;
        }
        
        .btn.reset:hover {
            background: #d32f2f;
        }
        
        .score-board {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .score-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .score-item:last-child {
            border-bottom: none;
        }
        
        .player-score {
            display: flex;
            align-items: center;
        }
        
        .score-color {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .instructions {
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
        }
        
        .instructions ul {
            padding-left: 20px;
            margin-top: 10px;
        }
        
        .instructions li {
            margin-bottom: 8px;
            line-height: 1.5;
        }
        
        .message {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 15px 30px;
            border-radius: 10px;
            z-index: 1000;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .message.show {
            opacity: 1;
        }
        
        .leaderboard {
            margin-top: 20px;
            padding: 15px;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 10px;
        }
        
        .leaderboard h3 {
            color: #ffcc00;
            margin-bottom: 10px;
            text-align: center;
        }
        
        .leader-item {
            display: flex;
            justify-content: space-between;
            padding: 8px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .leader-item:first-child {
            font-weight: bold;
            color: gold;
        }
        
        .leader-item:nth-child(2) {
            color: silver;
        }
        
        .leader-item:nth-child(3) {
            color: #cd7f32; /* ÈìúËâ≤ */
        }
        
        @media (max-width: 900px) {
            .game-area {
                flex-direction: column;
            }
            
            .board-container {
                min-width: 100%;
            }
            
            .controls {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üåà ÂΩ©Ëâ≤Âõ¥Ê£ã - ÂêÉÂ≠êÁ´ûËµõ</h1>
            <p>‰∏É‰∫∫ÂØπÊàòÔºåÁúãË∞ÅÂêÉÁöÑÂ≠êÊúÄÂ§öÔºÅ</p>
        </header>
        
        <div class="game-info">
            <div class="players-info" id="playersInfo">
                <!-- Áé©ÂÆ∂‰ø°ÊÅØÂ∞ÜÈÄöËøáJavaScriptÂä®ÊÄÅÁîüÊàê -->
            </div>
            <div class="game-stats">
                <div class="stat">
                    <div>ÂΩìÂâçÂõûÂêà</div>
                    <div class="stat-value" id="currentTurn">Á∫¢Ëâ≤</div>
                </div>
                <div class="stat">
                    <div>ÊÄªÊâãÊï∞</div>
                    <div class="stat-value" id="moveCount">0</div>
                </div>
            </div>
        </div>
        
        <div class="game-area">
            <div class="board-container">
                <div class="board" id="gameBoard">
                    <!-- Ê£ãÁõòÂ∞ÜÈÄöËøáJavaScriptÁîüÊàê -->
                </div>
            </div>
            
            <div class="controls">
                <div class="control-section">
                    <h2>Ê∏∏ÊàèÊìç‰Ωú</h2>
                    <div class="action-buttons">
                        <button class="btn pass" id="passBtn">Ë∑≥ËøáÂõûÂêà</button>
                        <button class="btn reset" id="resetBtn">ÈáçÊñ∞ÂºÄÂßã</button>
                    </div>
                </div>
                
                <div class="control-section score-board">
                    <h2>ÂêÉÂ≠êÊéíË°åÊ¶ú</h2>
                    <div id="scoreBoard">
                        <!-- ÂæóÂàÜÊ¶úÂ∞ÜÈÄöËøáJavaScriptÁîüÊàê -->
                    </div>
                </div>
                
                <div class="leaderboard">
                    <h3>üèÜ È¢ÜÂÖàËÄÖ</h3>
                    <div id="leaderboard">
                        <!-- ÊéíË°åÊ¶úÂ∞ÜÈÄöËøáJavaScriptÁîüÊàê -->
                    </div>
                </div>
            </div>
        </div>
        
        <div class="instructions">
            <h2>Ê∏∏ÊàèËßÑÂàô</h2>
            <ul>
                <li>7ÂêçÁé©ÂÆ∂ÂàÜÂà´‰ΩøÁî®Á∫¢„ÄÅÊ©ô„ÄÅÈªÑ„ÄÅÁªø„ÄÅÈùí„ÄÅËìù„ÄÅÁ¥´‰∏ÉÁßçÈ¢úËâ≤ÁöÑÊ£ãÂ≠ê</li>
                <li>ÁõÆÊ†áÊòØÂêÉÊéâÂØπÊâãÁöÑÊ£ãÂ≠êÔºåÂêÉÂ≠êÂ§öËÄÖËé∑ËÉú</li>
                <li>ÂΩì‰∏ÄÈ¢óÊ£ãÂ≠êË¢´Âõõ‰∏™‰∏çÂêåÈ¢úËâ≤ÁöÑÊ£ãÂ≠êÂåÖÂõ¥Êó∂ÔºåËØ•Ê£ãÂ≠êË¢´ÂêÉÊéâ</li>
                <li>ÂêÉÊéâ‰∏ÄÈ¢óÊ£ãÂ≠êÔºåÂõõ‰∏™ÂåÖÂõ¥ËÄÖÂêÑÂæó0.25ÂàÜ</li>
                <li>ÁÇπÂáªÊ£ãÁõò‰∫§ÂèâÁÇπÊîæÁΩÆÊ£ãÂ≠ê</li>
                <li>ËøûÁª≠Ë∑≥Ëøá‰∏§Ê¨°ÂàôÊ∏∏ÊàèÁªìÊùüÔºåËá™Âä®ËÆ°ÁÆóÊúÄÁªàÂæóÂàÜ</li>
            </ul>
        </div>
    </div>
    
    <div class="message" id="message"></div>

    <script>
        // Ê∏∏ÊàèÈÖçÁΩÆ
        const CONFIG = {
            BOARD_SIZE: 19,
            CELL_SIZE: 25,
            COLORS: [
                '#FF0000', // Á∫¢
                '#FF7700', // Ê©ô
                '#FFFF00', // ÈªÑ
                '#00FF00', // Áªø
                '#00FFFF', // Èùí
                '#0000FF', // Ëìù
                '#8A2BE2'  // Á¥´
            ],
            PLAYER_NAMES: ['Á∫¢Ëâ≤', 'Ê©ôËâ≤', 'ÈªÑËâ≤', 'ÁªøËâ≤', 'ÈùíËâ≤', 'ËìùËâ≤', 'Á¥´Ëâ≤']
        };

        // Ê∏∏ÊàèÁä∂ÊÄÅ
        const gameState = {
            board: [],
            currentPlayer: 0,
            moveCount: 0,
            passCount: 0,
            players: [],
            scores: [],
            capturedStones: [], // ËÆ∞ÂΩïË¢´ÂêÉÊéâÁöÑÊ£ãÂ≠ê
            gameOver: false
        };

        // ÂàùÂßãÂåñÊ∏∏Êàè
        function initGame() {
            // ÂàùÂßãÂåñÁé©ÂÆ∂
            gameState.players = CONFIG.PLAYER_NAMES.map((name, index) => ({
                id: index,
                name: name,
                color: CONFIG.COLORS[index]
            }));
            
            // ÂàùÂßãÂåñÂæóÂàÜ
            gameState.scores = Array(CONFIG.PLAYER_NAMES.length).fill(0);
            
            // ÂàùÂßãÂåñÊ£ãÁõò
            gameState.board = Array(CONFIG.BOARD_SIZE).fill(null)
                .map(() => Array(CONFIG.BOARD_SIZE).fill(null));
            
            // ÂàùÂßãÂåñË¢´ÂêÉÊéâÁöÑÊ£ãÂ≠êËÆ∞ÂΩï
            gameState.capturedStones = [];
            
            // ÈáçÁΩÆÊ∏∏ÊàèÁä∂ÊÄÅ
            gameState.currentPlayer = 0;
            gameState.moveCount = 0;
            gameState.passCount = 0;
            gameState.gameOver = false;
            
            renderBoard();
            renderPlayersInfo();
            renderScoreBoard();
            updateCurrentTurn();
        }

        // Ê∏≤ÊüìÊ£ãÁõò
        function renderBoard() {
            const board = document.getElementById('gameBoard');
            board.innerHTML = '';
            board.style.width = `${(CONFIG.BOARD_SIZE - 1) * CONFIG.CELL_SIZE}px`;
            board.style.height = `${(CONFIG.BOARD_SIZE - 1) * CONFIG.CELL_SIZE}px`;
            
            // ÁªòÂà∂ÁΩëÊ†ºÁ∫ø
            for (let i = 0; i < CONFIG.BOARD_SIZE; i++) {
                // Ê∞¥Âπ≥Á∫ø
                const hLine = document.createElement('div');
                hLine.className = 'grid-line horizontal-line';
                hLine.style.top = `${i * CONFIG.CELL_SIZE}px`;
                hLine.style.width = `${(CONFIG.BOARD_SIZE - 1) * CONFIG.CELL_SIZE}px`;
                board.appendChild(hLine);
                
                // ÂûÇÁõ¥Á∫ø
                const vLine = document.createElement('div');
                vLine.className = 'grid-line vertical-line';
                vLine.style.left = `${i * CONFIG.CELL_SIZE}px`;
                vLine.style.height = `${(CONFIG.BOARD_SIZE - 1) * CONFIG.CELL_SIZE}px`;
                board.appendChild(vLine);
            }
            
            // ÁªòÂà∂Êòü‰ΩçÁÇπ
            const starPoints = [
                [3, 3], [3, 9], [3, 15],
                [9, 3], [9, 9], [9, 15],
                [15, 3], [15, 9], [15, 15]
            ];
            
            starPoints.forEach(([x, y]) => {
                const star = document.createElement('div');
                star.className = 'star-point';
                star.style.left = `${x * CONFIG.CELL_SIZE - 4}px`;
                star.style.top = `${y * CONFIG.CELL_SIZE - 4}px`;
                board.appendChild(star);
            });
            
            // ÁªòÂà∂‰∫§ÂèâÁÇπÔºàÁî®‰∫éÁÇπÂáªÔºâ
            for (let x = 0; x < CONFIG.BOARD_SIZE; x++) {
                for (let y = 0; y < CONFIG.BOARD_SIZE; y++) {
                    const intersection = document.createElement('div');
                    intersection.className = 'intersection';
                    intersection.style.left = `${x * CONFIG.CELL_SIZE - 4}px`;
                    intersection.style.top = `${y * CONFIG.CELL_SIZE - 4}px`;
                    intersection.dataset.x = x;
                    intersection.dataset.y = y;
                    intersection.addEventListener('click', () => placeStone(x, y));
                    board.appendChild(intersection);
                }
            }
            
            // ÁªòÂà∂Ê£ãÂ≠ê
            for (let x = 0; x < CONFIG.BOARD_SIZE; x++) {
                for (let y = 0; y < CONFIG.BOARD_SIZE; y++) {
                    if (gameState.board[x][y] !== null) {
                        const stone = document.createElement('div');
                        stone.className = 'stone';
                        stone.style.width = `${CONFIG.CELL_SIZE - 4}px`;
                        stone.style.height = `${CONFIG.CELL_SIZE - 4}px`;
                        stone.style.left = `${x * CONFIG.CELL_SIZE - (CONFIG.CELL_SIZE - 4) / 2}px`;
                        stone.style.top = `${y * CONFIG.CELL_SIZE - (CONFIG.CELL_SIZE - 4) / 2}px`;
                        stone.style.backgroundColor = CONFIG.COLORS[gameState.board[x][y]];
                        stone.dataset.x = x;
                        stone.dataset.y = y;
                        board.appendChild(stone);
                    }
                }
            }
        }

        // ÊîæÁΩÆÊ£ãÂ≠ê
        function placeStone(x, y) {
            if (gameState.gameOver) return;
            
            // Ê£ÄÊü•‰ΩçÁΩÆÊòØÂê¶‰∏∫Á©∫
            if (gameState.board[x][y] !== null) return;
            
            // ÊîæÁΩÆÊ£ãÂ≠ê
            gameState.board[x][y] = gameState.currentPlayer;
            gameState.moveCount++;
            gameState.passCount = 0;
            
            // Ê£ÄÊü•ÊòØÂê¶ÊúâÊ£ãÂ≠êË¢´ÂêÉÊéâ
            checkCaptures(x, y);
            
            // ÂàáÊç¢Âà∞‰∏ã‰∏Ä‰∏™Áé©ÂÆ∂
            gameState.currentPlayer = (gameState.currentPlayer + 1) % CONFIG.PLAYER_NAMES.length;
            
            // Êõ¥Êñ∞ÁïåÈù¢
            renderBoard();
            renderPlayersInfo();
            renderScoreBoard();
            updateCurrentTurn();
            updateMoveCount();
        }

        // Ê£ÄÊü•ÊòØÂê¶ÊúâÊ£ãÂ≠êË¢´ÂêÉÊéâ
        function checkCaptures(x, y) {
            // Ê£ÄÊü•Âë®Âõ¥Âõõ‰∏™ÊñπÂêëÁöÑÊ£ãÂ≠ê
            const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]; // ‰∏ä‰∏ãÂ∑¶Âè≥
            const surroundingPlayers = [];
            const surroundingPositions = [];
            
            for (const [dx, dy] of directions) {
                const nx = x + dx;
                const ny = y + dy;
                
                // Ê£ÄÊü•ÊòØÂê¶Âú®Ê£ãÁõòËåÉÂõ¥ÂÜÖ
                if (nx >= 0 && nx < CONFIG.BOARD_SIZE && ny >= 0 && ny < CONFIG.BOARD_SIZE) {
                    const player = gameState.board[nx][ny];
                    if (player !== null) {
                        // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèËÆ∞ÂΩïËøáËØ•Áé©ÂÆ∂
                        if (!surroundingPlayers.includes(player)) {
                            surroundingPlayers.push(player);
                            surroundingPositions.push([nx, ny]);
                        }
                    }
                }
            }
            
            // Â¶ÇÊûúÂë®Âõ¥ÊúâÂõõ‰∏™‰∏çÂêåÁé©ÂÆ∂ÁöÑÊ£ãÂ≠êÔºåÂàô‰∏≠ÂøÉÊ£ãÂ≠êË¢´ÂêÉÊéâ
            if (surroundingPlayers.length === 4) {
                // Ê£ÄÊü•ÊòØÂê¶Âõõ‰∏™Áé©ÂÆ∂ÈÉΩ‰∏çÂêå
                const uniquePlayers = [...new Set(surroundingPlayers)];
                if (uniquePlayers.length === 4) {
                    // ÂêÉÊéâ‰∏≠ÂøÉÊ£ãÂ≠ê
                    const capturedPlayer = gameState.board[x][y];
                    gameState.board[x][y] = null;
                    
                    // Âõõ‰∏™ÂåÖÂõ¥ËÄÖÂêÑÂæó0.25ÂàÜ
                    for (const player of surroundingPlayers) {
                        gameState.scores[player] += 0.25;
                    }
                    
                    // ËÆ∞ÂΩïË¢´ÂêÉÊéâÁöÑÊ£ãÂ≠ê
                    gameState.capturedStones.push({
                        x, y, player: capturedPlayer,
                        captors: surroundingPlayers
                    });
                    
                    // ÊòæÁ§∫ÊèêÁ§∫‰ø°ÊÅØ
                    showMessage(`${CONFIG.PLAYER_NAMES[capturedPlayer]}ÁöÑÊ£ãÂ≠êË¢´ÂêÉÊéâ‰∫ÜÔºÅ`);
                }
            }
            
            // Ê£ÄÊü•Êñ∞ÊîæÁΩÆÁöÑÊ£ãÂ≠êÊòØÂê¶ÂêÉÊéâ‰∫ÜÂë®Âõ¥ÁöÑÊ£ãÂ≠ê
            for (const [sx, sy] of surroundingPositions) {
                const surroundingPlayer = gameState.board[sx][sy];
                if (surroundingPlayer !== null) {
                    checkIfCaptured(sx, sy);
                }
            }
        }

        // Ê£ÄÊü•Êüê‰∏™Ê£ãÂ≠êÊòØÂê¶Ë¢´ÂêÉÊéâ
        function checkIfCaptured(x, y) {
            const player = gameState.board[x][y];
            if (player === null) return;
            
            const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]; // ‰∏ä‰∏ãÂ∑¶Âè≥
            const surroundingPlayers = [];
            
            for (const [dx, dy] of directions) {
                const nx = x + dx;
                const ny = y + dy;
                
                // Ê£ÄÊü•ÊòØÂê¶Âú®Ê£ãÁõòËåÉÂõ¥ÂÜÖ
                if (nx >= 0 && nx < CONFIG.BOARD_SIZE && ny >= 0 && ny < CONFIG.BOARD_SIZE) {
                    const surroundingPlayer = gameState.board[nx][ny];
                    if (surroundingPlayer !== null && surroundingPlayer !== player) {
                        // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèËÆ∞ÂΩïËøáËØ•Áé©ÂÆ∂
                        if (!surroundingPlayers.includes(surroundingPlayer)) {
                            surroundingPlayers.push(surroundingPlayer);
                        }
                    }
                }
            }
            
            // Â¶ÇÊûúË¢´Âõõ‰∏™‰∏çÂêåÁé©ÂÆ∂ÁöÑÊ£ãÂ≠êÂåÖÂõ¥ÔºåÂàôË¢´ÂêÉÊéâ
            if (surroundingPlayers.length === 4) {
                const uniquePlayers = [...new Set(surroundingPlayers)];
                if (uniquePlayers.length === 4) {
                    // ÂêÉÊéâËØ•Ê£ãÂ≠ê
                    gameState.board[x][y] = null;
                    
                    // Âõõ‰∏™ÂåÖÂõ¥ËÄÖÂêÑÂæó0.25ÂàÜ
                    for (const p of surroundingPlayers) {
                        gameState.scores[p] += 0.25;
                    }
                    
                    // ËÆ∞ÂΩïË¢´ÂêÉÊéâÁöÑÊ£ãÂ≠ê
                    gameState.capturedStones.push({
                        x, y, player,
                        captors: surroundingPlayers
                    });
                    
                    // ÊòæÁ§∫ÊèêÁ§∫‰ø°ÊÅØ
                    showMessage(`${CONFIG.PLAYER_NAMES[player]}ÁöÑÊ£ãÂ≠êË¢´ÂêÉÊéâ‰∫ÜÔºÅ`);
                }
            }
        }

        // Ë∑≥ËøáÂõûÂêà
        function passTurn() {
            if (gameState.gameOver) return;
            
            gameState.passCount++;
            gameState.moveCount++;
            
            // ÊòæÁ§∫Ë∑≥Ëøá‰ø°ÊÅØ
            showMessage(`${CONFIG.PLAYER_NAMES[gameState.currentPlayer]}Ë∑≥Ëøá‰∫ÜÂõûÂêà`);
            
            // ÂàáÊç¢Âà∞‰∏ã‰∏Ä‰∏™Áé©ÂÆ∂
            gameState.currentPlayer = (gameState.currentPlayer + 1) % CONFIG.PLAYER_NAMES.length;
            
            // Â¶ÇÊûúËøûÁª≠Ë∑≥Ëøá‰∏§Ê¨°ÔºåÊ∏∏ÊàèÁªìÊùü
            if (gameState.passCount >= 2) {
                endGame();
                return;
            }
            
            updateCurrentTurn();
            updateMoveCount();
        }

        // ÁªìÊùüÊ∏∏Êàè
        function endGame() {
            gameState.gameOver = true;
            showMessage('Ê∏∏ÊàèÁªìÊùüÔºÅÊúÄÁªàÂæóÂàÜÂ∑≤ËÆ°ÁÆó„ÄÇ');
            
            // ÊòæÁ§∫ÊúÄÁªàÁªìÊûú
            setTimeout(() => {
                const sortedPlayers = [...gameState.players].sort((a, b) => {
                    return gameState.scores[b.id] - gameState.scores[a.id];
                });
                
                let result = 'üèÜ ÊúÄÁªàÊéíÂêç üèÜ\n';
                sortedPlayers.forEach((player, index) => {
                    const medal = index === 0 ? 'ü•á' : 
                                 index === 1 ? 'ü•à' : 
                                 index === 2 ? 'ü•â' : '';
                    result += `${medal} ${player.name}: ${gameState.scores[player.id].toFixed(2)}ÂàÜ\n`;
                });
                
                alert(result);
            }, 1000);
        }

        // Ê∏≤ÊüìÁé©ÂÆ∂‰ø°ÊÅØ
        function renderPlayersInfo() {
            const container = document.getElementById('playersInfo');
            container.innerHTML = '';
            
            gameState.players.forEach((player, index) => {
                const playerEl = document.createElement('div');
                playerEl.className = `player ${index === gameState.currentPlayer ? 'active' : ''}`;
                playerEl.innerHTML = `
                    <div class="player-color" style="background-color: ${player.color}"></div>
                    <div>${player.name}</div>
                `;
                container.appendChild(playerEl);
            });
        }

        // Êõ¥Êñ∞ÂΩìÂâçÂõûÂêàÊòæÁ§∫
        function updateCurrentTurn() {
            document.getElementById('currentTurn').textContent = 
                CONFIG.PLAYER_NAMES[gameState.currentPlayer];
        }

        // Êõ¥Êñ∞ÊâãÊï∞ÊòæÁ§∫
        function updateMoveCount() {
            document.getElementById('moveCount').textContent = gameState.moveCount;
        }

        // Ê∏≤ÊüìÂæóÂàÜÊ¶ú
        function renderScoreBoard() {
            const container = document.getElementById('scoreBoard');
            container.innerHTML = '';
            
            // ÊåâÂæóÂàÜÊéíÂ∫è
            const sortedPlayers = [...gameState.players].sort((a, b) => {
                return gameState.scores[b.id] - gameState.scores[a.id];
            });
            
            sortedPlayers.forEach(player => {
                const scoreItem = document.createElement('div');
                scoreItem.className = 'score-item';
                
                scoreItem.innerHTML = `
                    <div class="player-score">
                        <div class="score-color" style="background-color: ${player.color}"></div>
                        <div>${player.name}</div>
                    </div>
                    <div>${gameState.scores[player.id].toFixed(2)}</div>
                `;
                container.appendChild(scoreItem);
            });
        }

        // Ê∏≤ÊüìÊéíË°åÊ¶ú
        function renderLeaderboard() {
            const container = document.getElementById('leaderboard');
            container.innerHTML = '';
            
            // ÊåâÂæóÂàÜÊéíÂ∫è
            const sortedPlayers = [...gameState.players].sort((a, b) => {
                return gameState.scores[b.id] - gameState.scores[a.id];
            });
            
            // Âè™ÊòæÁ§∫Ââç‰∏âÂêç
            const topPlayers = sortedPlayers.slice(0, 3);
            
            topPlayers.forEach((player, index) => {
                const leaderItem = document.createElement('div');
                leaderItem.className = 'leader-item';
                
                const medal = index === 0 ? 'ü•á' : 
                             index === 1 ? 'ü•à' : 
                             index === 2 ? 'ü•â' : '';
                
                leaderItem.innerHTML = `
                    <div>${medal} ${player.name}</div>
                    <div>${gameState.scores[player.id].toFixed(2)}</div>
                `;
                container.appendChild(leaderItem);
            });
        }

        // ÈáçÊñ∞ÂºÄÂßãÊ∏∏Êàè
        function resetGame() {
            if (confirm('Á°ÆÂÆöË¶ÅÈáçÊñ∞ÂºÄÂßãÊ∏∏ÊàèÂêóÔºü')) {
                initGame();
                showMessage('Ê∏∏ÊàèÂ∑≤ÈáçÊñ∞ÂºÄÂßã');
            }
        }

        // ÊòæÁ§∫Ê∂àÊÅØ
        function showMessage(text) {
            const messageEl = document.getElementById('message');
            messageEl.textContent = text;
            messageEl.classList.add('show');
            
            setTimeout(() => {
                messageEl.classList.remove('show');
            }, 3000);
        }

        // ÂàùÂßãÂåñ‰∫ã‰ª∂ÁõëÂê¨Âô®
        function initEventListeners() {
            document.getElementById('passBtn').addEventListener('click', passTurn);
            document.getElementById('resetBtn').addEventListener('click', resetGame);
        }

        // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñÊ∏∏Êàè
        window.onload = function() {
            initGame();
            initEventListeners();
            
            // ÂÆöÊúüÊõ¥Êñ∞ÊéíË°åÊ¶ú
            setInterval(renderLeaderboard, 1000);
        };
    </script>
</body>
</html>
